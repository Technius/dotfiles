" Plugins (vim + nvim)
call plug#begin()
" Theme
Plug 'morhetz/gruvbox'
Plug 'kien/rainbow_parentheses.vim'
" Navigation
Plug 'scrooloose/nerdtree'
Plug 'christoomey/vim-tmux-navigator'
" Language
Plug 'pangloss/vim-javascript'
Plug 'elzr/vim-json'
Plug 'derekwyatt/vim-scala'
Plug 'ensime/ensime-vim'
Plug 'eagletmt/neco-ghc'
" Misc
Plug 'wakatime/vim-wakatime'

" Neovim only
if has("nvim")
    Plug 'Shougo/deoplete.nvim'
    Plug 'vim-airline/vim-airline'
" Vim only
else
    Plug 'Shougo/neocomplete.vim'
endif
call plug#end()

"Basic
syntax on
filetype plugin indent on


" Powerline
if has('nvim')
    let g:airline_powerline_fonts = 1
else
python << endpython
try:
  from powerline.vim import setup as powerline_setup
  powerline_setup()
  del powerline_setup
except ImportError:
  pass
endpython
endif
set laststatus=2



" Theme settings
colorscheme gruvbox
let g:gruvbox_contrast_dark="soft"
set background=dark

if &term =~ '256color'
    " Disable Background Color Erase (BCE) so that color schemes
    " work properly when Vim is used inside tmux and GNU screen.
    set t_ut=
endif

" Terminal fixes
" set t_Co=256



" Line numbers
" set number



" Rainbow parentheses
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces



" Configure json plugin
let g:vim_json_syntax_conceal = 0



" Format settings
autocmd FileType css setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType javascript setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType python setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType json setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType lua setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType html setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType xml setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType haskell setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType cpp setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType c setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType yaml setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType sh setlocal expandtab shiftwidth=4 softtabstop=4 smartindent
autocmd FileType java setlocal expandtab shiftwidth=4 softtabstop=4 smartindent
autocmd FileType markdown setlocal textwidth=80 wrap



" Enable neocomplete/deoplete
if has('nvim') 
    let g:deoplete#enable_at_startup = 1
    if !exists('g:deoplete#omni#input_patterns')
        let g:deoplete#omni#input_patterns = {}
    endif
    " Close on backspace
    inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"
else
    let g:neocomplete#enable_at_startup = 1
    " Close on backspace
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
endif

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
endfunction

" Tab completion
inoremap <silent> <expr><TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ <SID>start_completion()
function! s:check_back_space() abort "{{{
    let col = col('.') - 1
    return !col || getline('.')[col - 1] =~ '\s'
endfunction "}}}
function! s:start_completion()
    if has('nvim')
        return deoplete#mappings#manual_complete()
    else
        return neocomplete#start_manual_complete()
    endif
endfunction

" Automatically close any preview windows
autocmd CompleteDone * pclose!

" Enable omni completion
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" Disable haskell-vim omnifunc
let g:haskellmode_completion_ghc = 0
" Detailed types for haskell
let g:necoghc_enable_detailed_browse = 1
