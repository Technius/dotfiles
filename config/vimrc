" Enable folding of sections
" vim: foldmethod=marker foldlevel=0 foldcolumn=3 foldnestmax=3
"
" Use 'zo' to open each section and 'zc' to close each section.

" Plugins (vim + nvim) {{{
call plug#begin()
" Theme
Plug 'morhetz/gruvbox'
Plug 'kien/rainbow_parentheses.vim'
" Navigation
Plug 'scrooloose/nerdtree'
Plug 'christoomey/vim-tmux-navigator'
" Language
Plug 'pangloss/vim-javascript'
Plug 'elzr/vim-json'
Plug 'derekwyatt/vim-scala'
Plug 'ensime/ensime-vim'
Plug 'eagletmt/neco-ghc'
Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'
" Misc
Plug 'wakatime/vim-wakatime'

" Neovim only {{{
if has("nvim")
    Plug 'Shougo/deoplete.nvim'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
    Plug 'junegunn/fzf.vim'
    Plug 'zchee/deoplete-jedi'
" }}}
" Vim only {{{
else
    Plug 'Shougo/neocomplete.vim'
    Plug 'Shougo/vimproc.vim', { 'do': 'make' }
    Plug 'Shougo/unite.vim' "Although I prefer fzf, it has weird issues in tmux
endif
" }}}
call plug#end()
" }}}

" Basic {{{
syntax on
filetype plugin indent on
" }}}

" Powerline {{{
if has('nvim')
    let g:airline_powerline_fonts = 1
    let g:airline_theme = 'hybridline'
else
python << endpython
try:
  from powerline.vim import setup as powerline_setup
  powerline_setup()
  del powerline_setup
except ImportError:
  pass
endpython
endif
set laststatus=2
" }}}

" Theme settings {{{
colorscheme gruvbox
let g:gruvbox_contrast_dark="soft"
set background=dark

if &term =~ '256color'
    " Disable Background Color Erase (BCE) so that color schemes
    " work properly when Vim is used inside tmux and GNU screen.
    set t_ut=
endif

" Terminal fixes
" set t_Co=256

" Line numbers
" set number



" Rainbow parentheses
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" }}}

" Format settings {{{
autocmd FileType css setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType javascript setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType python setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType json setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType lua setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType html setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType xml setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType haskell setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType cpp setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType c setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType yaml setlocal expandtab shiftwidth=2 softtabstop=2 smartindent
autocmd FileType sh setlocal expandtab shiftwidth=4 softtabstop=4 smartindent
autocmd FileType java setlocal expandtab shiftwidth=4 softtabstop=4 smartindent
autocmd FileType markdown setlocal textwidth=80 wrap
autocmd FileType vim setlocal expandtab shiftwidth=4 softtabstop=4 smartindent

" Configure json plugin
let g:vim_json_syntax_conceal = 0

" }}}

" Enable neocomplete/deoplete {{{
if has('nvim') 
    let g:deoplete#enable_at_startup = 1
    if !exists('g:deoplete#omni#input_patterns')
        let g:deoplete#omni#input_patterns = {}
    endif
    " Close on backspace
    inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"

    " deoplete-jedi
    let g:deoplete#sources#jedi#show_docstring = 1

    " ensime (scala), adapted from Jacoby6000 from
    " https://github.com/ensime/ensime-vim/issues/282
    let g:deoplete#omni#input_patterns.scala = [
      \ '[^. *\t]\.\w*',
      \ '[:\[,] ?\w*',
      \ '^import .*'
      \]
else
    let g:neocomplete#enable_at_startup = 1
    " Close on backspace
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
endif

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
endfunction

" Tab to autocomplete and forward cycle
inoremap <silent> <expr><TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ <SID>start_completion()
" Shift tab to reverse cycle
inoremap <silent> <expr><s-TAB> pumvisible() ? "\<C-p>" : "\<s-TAB>"
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1] =~ '\s'
endfunction
function! s:start_completion()
    if has('nvim')
        return deoplete#mappings#manual_complete()
    else
        return neocomplete#start_manual_complete()
    endif
endfunction

" Automatically close any preview windows
autocmd CompleteDone * pclose!

" Enable omni completion
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" Automaticaly close HTML tags
autocmd FileType html imap </ </<C-X><C-O><C-N>

" Disable haskell-vim omnifunc
let g:haskellmode_completion_ghc = 0
" Detailed types for haskell
let g:necoghc_enable_detailed_browse = 1

" }}}

" Fuzzy finder settings {{{
if has('nvim')
    nmap <C-p> :FZF<CR>
else
    nmap <C-p> :Unite file_rec/async<CR>
    call unite#custom#profile('default', 'context', { 'direction': 'botright' })
endif
" }}}

" Additional Keybindings {{{
let mapleader="\<space>"
" Reload vim
nmap <leader>V :source $MYVIMRC<CR>
" Paste from clipboard
nmap <leader>p "+p
nmap <leader>P "+P
" Copy to clipboard
vmap <leader>y "+y
" }}}
